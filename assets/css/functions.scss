@import './variable.scss';

// function

@function px2vw($args) {
    @return $args * 100vw / $BASE_WIDTH;
}

// mixin

@mixin pre($style, $value) {
    -webkit-#{$style}: $value;
    -moz-#{$style}: $value;
    -ms-#{$style}: $value;
    -o-#{$style}: $value;
    #{$style}: $value;
}

@mixin border-radius($radius: px2vw(5)) {
    @include pre(border-radius, $radius);
}

@mixin img-optimize() {
    image-rendering: -moz-crisp-edges;
    image-rendering: -o-crisp-edges;
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
    -ms-interpolation-mode: nearest-neighbor;
}

@mixin linear-gradient($deg, $startColor, $endColor) {
    background-image: -webkit-linear-gradient($deg, $startColor, $endColor);
    background-image: -moz-linear-gradient($deg, $startColor, $endColor);
    background-image: -ms-linear-gradient($deg, $startColor, $endColor);
    background-image: -o-linear-gradient($deg, $startColor, $endColor);
    background-image: linear-gradient($deg, $startColor, $endColor);
}

@mixin placeholder-color($type: input, $color: red) {
    &::#{$type}-placeholder {
        color: $color;
    }
    &::-webkit-#{$type}-placeholder {
        color: $color;
    }
    &::-moz-placeholder {
        color: $color;
    }
    &::-moz-placeholder {
        color: $color;
    }
    &::-ms-#{$type}-placeholder {
        color: $color;
    }
}

@mixin flex($val: flex) {
    @if $val == flex {
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
    }
    @if $val == inline-flex {
        display: -webkit-inline-box;
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
    }
}

@mixin flex1($val: 1) {
    @if $val == 1 {
        -webkit-box-flex: 1;
        -moz-box-flex: 1;
        width: 0;
        -webkit-flex: 1;
        -ms-flex: 1;
        flex: 1;
    }
    @if $val == auto {
        -webkit-box-flex: auto;
        -moz-box-flex: auto;
        -webkit-flex: auto;
        -ms-flex: auto;
        flex: auto;
    }
}

@mixin align-items($val: center) {
    @if $val == center {
        -webkit-box-align: center;
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
    }
    @if $val == baseline {
        -webkit-box-align: baseline;
        -ms-flex-align: baseline;
        -webkit-align-items: baseline;
        align-items: baseline;
    }
    @if $val == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
        -webkit-align-items: flex-end;
        align-items: flex-end;
    }
    @if $val == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
        -webkit-align-items: flex-start;
        align-items: flex-start;
    }
}

@mixin justify-content($val: center) {
    @if $val == center {
        -webkit-box-pack: center;
        -moz-justify-content: center;
        -ms-flex-pack: center;
        box-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
    }
    @if $val == flex-end {
        -webkit-box-pack: end;
        -moz-justify-content: end;
        -ms-flex-pack: end;
        box-pack: end;
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
    }
    @if $val == flex-start {
        -webkit-box-pack: start;
        -moz-justify-content: start;
        -ms-flex-pack: start;
        box-pack: start;
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
    }
    @if $val == space-between {
        -webkit-box-pack: justify;
        -moz-justify-content: justify;
        -ms-flex-pack: justify;
        box-pack: justify;
        -webkit-justify-content: space-between;
        justify-content: space-between;
    }
    @if $val == space-around {
        -webkit-box-pack: distribute;
        -moz-justify-content: distribute;
        -ms-flex-pack: distribute;
        box-pack: distribute;
        -webkit-justify-content: space-around;
        justify-content: space-around;
    }
}

@mixin flex-direction($val: row) {
    @if $val == row {
        -webkit-box-orient: horizontal;
        -moz-box-orient: horizontal;
        -ms-flex-direction: row;
        -moz-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
    }
    @if $val == column {
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -moz-box-orient: vertical;
        -moz-box-direction: normal;
        flex-direction: column;
        -webkit-flex-direction: column;
    }
}

@mixin pos($position: absolute, $type: xy) {
    position: $position;
    @if $type == x {
        left: 50%;
        top: 0;
        @include pre(transform, translateX(-50%));
    }
    @if $type == y {
        left: 0;
        top: 50%;
        @include pre(transform, translateY(-50%));
    }
    @if $type == xy {
        left: 50%;
        top: 50%;
        @include pre(transform, translate(-50%, -50%));
    }
}

// foreach

@each $sizeKey, $sizeValue in $margin-bottom-sizes {
    .mb-#{$sizeKey} {
        margin-bottom: px2vw($sizeValue) !important;
    }
}
